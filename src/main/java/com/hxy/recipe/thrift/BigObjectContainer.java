/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hxy.recipe.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2023-01-16")
public class BigObjectContainer implements org.apache.thrift.TBase<BigObjectContainer, BigObjectContainer._Fields>, java.io.Serializable, Cloneable, Comparable<BigObjectContainer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BigObjectContainer");

  private static final org.apache.thrift.protocol.TField BIG_OBJECT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("bigObjectList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField I2D_FIELD_DESC = new org.apache.thrift.protocol.TField("i2d", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BigObjectContainerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BigObjectContainerTupleSchemeFactory());
  }

  public List<BigObject> bigObjectList; // optional
  public Map<Integer,Double> i2d; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIG_OBJECT_LIST((short)1, "bigObjectList"),
    I2D((short)2, "i2d");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIG_OBJECT_LIST
          return BIG_OBJECT_LIST;
        case 2: // I2D
          return I2D;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BIG_OBJECT_LIST,_Fields.I2D};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIG_OBJECT_LIST, new org.apache.thrift.meta_data.FieldMetaData("bigObjectList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BigObject.class))));
    tmpMap.put(_Fields.I2D, new org.apache.thrift.meta_data.FieldMetaData("i2d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BigObjectContainer.class, metaDataMap);
  }

  public BigObjectContainer() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BigObjectContainer(BigObjectContainer other) {
    if (other.isSetBigObjectList()) {
      List<BigObject> __this__bigObjectList = new ArrayList<BigObject>(other.bigObjectList.size());
      for (BigObject other_element : other.bigObjectList) {
        __this__bigObjectList.add(new BigObject(other_element));
      }
      this.bigObjectList = __this__bigObjectList;
    }
    if (other.isSetI2d()) {
      Map<Integer,Double> __this__i2d = new HashMap<Integer,Double>(other.i2d);
      this.i2d = __this__i2d;
    }
  }

  public BigObjectContainer deepCopy() {
    return new BigObjectContainer(this);
  }

  @Override
  public void clear() {
    this.bigObjectList = null;
    this.i2d = null;
  }

  public int getBigObjectListSize() {
    return (this.bigObjectList == null) ? 0 : this.bigObjectList.size();
  }

  public java.util.Iterator<BigObject> getBigObjectListIterator() {
    return (this.bigObjectList == null) ? null : this.bigObjectList.iterator();
  }

  public void addToBigObjectList(BigObject elem) {
    if (this.bigObjectList == null) {
      this.bigObjectList = new ArrayList<BigObject>();
    }
    this.bigObjectList.add(elem);
  }

  public List<BigObject> getBigObjectList() {
    return this.bigObjectList;
  }

  public BigObjectContainer setBigObjectList(List<BigObject> bigObjectList) {
    this.bigObjectList = bigObjectList;
    return this;
  }

  public void unsetBigObjectList() {
    this.bigObjectList = null;
  }

  /** Returns true if field bigObjectList is set (has been assigned a value) and false otherwise */
  public boolean isSetBigObjectList() {
    return this.bigObjectList != null;
  }

  public void setBigObjectListIsSet(boolean value) {
    if (!value) {
      this.bigObjectList = null;
    }
  }

  public int getI2dSize() {
    return (this.i2d == null) ? 0 : this.i2d.size();
  }

  public void putToI2d(int key, double val) {
    if (this.i2d == null) {
      this.i2d = new HashMap<Integer,Double>();
    }
    this.i2d.put(key, val);
  }

  public Map<Integer,Double> getI2d() {
    return this.i2d;
  }

  public BigObjectContainer setI2d(Map<Integer,Double> i2d) {
    this.i2d = i2d;
    return this;
  }

  public void unsetI2d() {
    this.i2d = null;
  }

  /** Returns true if field i2d is set (has been assigned a value) and false otherwise */
  public boolean isSetI2d() {
    return this.i2d != null;
  }

  public void setI2dIsSet(boolean value) {
    if (!value) {
      this.i2d = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIG_OBJECT_LIST:
      if (value == null) {
        unsetBigObjectList();
      } else {
        setBigObjectList((List<BigObject>)value);
      }
      break;

    case I2D:
      if (value == null) {
        unsetI2d();
      } else {
        setI2d((Map<Integer,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIG_OBJECT_LIST:
      return getBigObjectList();

    case I2D:
      return getI2d();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIG_OBJECT_LIST:
      return isSetBigObjectList();
    case I2D:
      return isSetI2d();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BigObjectContainer)
      return this.equals((BigObjectContainer)that);
    return false;
  }

  public boolean equals(BigObjectContainer that) {
    if (that == null)
      return false;

    boolean this_present_bigObjectList = true && this.isSetBigObjectList();
    boolean that_present_bigObjectList = true && that.isSetBigObjectList();
    if (this_present_bigObjectList || that_present_bigObjectList) {
      if (!(this_present_bigObjectList && that_present_bigObjectList))
        return false;
      if (!this.bigObjectList.equals(that.bigObjectList))
        return false;
    }

    boolean this_present_i2d = true && this.isSetI2d();
    boolean that_present_i2d = true && that.isSetI2d();
    if (this_present_i2d || that_present_i2d) {
      if (!(this_present_i2d && that_present_i2d))
        return false;
      if (!this.i2d.equals(that.i2d))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bigObjectList = true && (isSetBigObjectList());
    list.add(present_bigObjectList);
    if (present_bigObjectList)
      list.add(bigObjectList);

    boolean present_i2d = true && (isSetI2d());
    list.add(present_i2d);
    if (present_i2d)
      list.add(i2d);

    return list.hashCode();
  }

  @Override
  public int compareTo(BigObjectContainer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBigObjectList()).compareTo(other.isSetBigObjectList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigObjectList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigObjectList, other.bigObjectList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI2d()).compareTo(other.isSetI2d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI2d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i2d, other.i2d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BigObjectContainer(");
    boolean first = true;

    if (isSetBigObjectList()) {
      sb.append("bigObjectList:");
      if (this.bigObjectList == null) {
        sb.append("null");
      } else {
        sb.append(this.bigObjectList);
      }
      first = false;
    }
    if (isSetI2d()) {
      if (!first) sb.append(", ");
      sb.append("i2d:");
      if (this.i2d == null) {
        sb.append("null");
      } else {
        sb.append(this.i2d);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BigObjectContainerStandardSchemeFactory implements SchemeFactory {
    public BigObjectContainerStandardScheme getScheme() {
      return new BigObjectContainerStandardScheme();
    }
  }

  private static class BigObjectContainerStandardScheme extends StandardScheme<BigObjectContainer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BigObjectContainer struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIG_OBJECT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.bigObjectList = new ArrayList<BigObject>(_list16.size);
                BigObject _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new BigObject();
                  _elem17.read(iprot);
                  struct.bigObjectList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setBigObjectListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I2D
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.i2d = new HashMap<Integer,Double>(2*_map19.size);
                int _key20;
                double _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readI32();
                  _val21 = iprot.readDouble();
                  struct.i2d.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setI2dIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BigObjectContainer struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bigObjectList != null) {
        if (struct.isSetBigObjectList()) {
          oprot.writeFieldBegin(BIG_OBJECT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bigObjectList.size()));
            for (BigObject _iter23 : struct.bigObjectList)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.i2d != null) {
        if (struct.isSetI2d()) {
          oprot.writeFieldBegin(I2D_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.i2d.size()));
            for (Map.Entry<Integer, Double> _iter24 : struct.i2d.entrySet())
            {
              oprot.writeI32(_iter24.getKey());
              oprot.writeDouble(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BigObjectContainerTupleSchemeFactory implements SchemeFactory {
    public BigObjectContainerTupleScheme getScheme() {
      return new BigObjectContainerTupleScheme();
    }
  }

  private static class BigObjectContainerTupleScheme extends TupleScheme<BigObjectContainer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BigObjectContainer struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBigObjectList()) {
        optionals.set(0);
      }
      if (struct.isSetI2d()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBigObjectList()) {
        {
          oprot.writeI32(struct.bigObjectList.size());
          for (BigObject _iter25 : struct.bigObjectList)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetI2d()) {
        {
          oprot.writeI32(struct.i2d.size());
          for (Map.Entry<Integer, Double> _iter26 : struct.i2d.entrySet())
          {
            oprot.writeI32(_iter26.getKey());
            oprot.writeDouble(_iter26.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BigObjectContainer struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bigObjectList = new ArrayList<BigObject>(_list27.size);
          BigObject _elem28;
          for (int _i29 = 0; _i29 < _list27.size; ++_i29)
          {
            _elem28 = new BigObject();
            _elem28.read(iprot);
            struct.bigObjectList.add(_elem28);
          }
        }
        struct.setBigObjectListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.i2d = new HashMap<Integer,Double>(2*_map30.size);
          int _key31;
          double _val32;
          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
          {
            _key31 = iprot.readI32();
            _val32 = iprot.readDouble();
            struct.i2d.put(_key31, _val32);
          }
        }
        struct.setI2dIsSet(true);
      }
    }
  }

}

