cmake_minimum_required(VERSION 3.23.2)

project(CMakeRBTree)

function(set_cache name)
    set(${name} ${ARGN} CACHE INTERNAL "")
endfunction()

function(allocate_init prefix)
    set(counter_name "${prefix}_counter")
    set_cache(${counter_name} 0)
endfunction()

function(allocate prefix result)
    set(counter_name "${prefix}_counter")
    set(counter "${${counter_name}}")
    set(${result} "${prefix}_${counter}" PARENT_SCOPE)
    math(EXPR counter "${counter} + 1")
    set_cache(${counter_name} ${counter})
endfunction()

function(rb_set_root prefix node)
    set_cache(${prefix}_root ${node})
endfunction()

function(rb_init prefix)
    allocate_init(${prefix})
    rb_set_root(${prefix} FALSE)
endfunction()

function(rb_node_get_key node key)
    list(GET ${node} 0 key_)
    set(${key} ${key_} PARENT_SCOPE)
endfunction()
function(rb_node_get_data node data)
    list(GET ${node} 1 data_)
    set(${data} ${data_} PARENT_SCOPE)
endfunction()
function(rb_node_get_color node color)
    list(GET ${node} 2 color_)
    set(${color} ${color_} PARENT_SCOPE)
endfunction()
function(rb_node_get_parent node parent)
    list(GET ${node} 3 parent_)
    set(${parent} ${parent_} PARENT_SCOPE)
endfunction()
function(rb_node_get_left node left)
    list(GET ${node} 4 left_)
    set(${left} ${left_} PARENT_SCOPE)
endfunction()
function(rb_node_get_right node right)
    list(GET ${node} 5 right_)
    set(${right} ${right_} PARENT_SCOPE)
endfunction()

function(rb_node_set_key node key)
    set(node_ ${${node}})
    list(REMOVE_AT node_ 0)
    list(INSERT node_ 0 ${key})
    set_cache(${node} ${node_})
endfunction()
function(rb_node_set_data node data)
    set(node_ ${${node}})
    list(REMOVE_AT node_ 1)
    list(INSERT node_ 1 ${data})
    set_cache(${node} ${node_})
endfunction()
function(rb_node_set_color node color)
    set(node_ ${${node}})
    list(REMOVE_AT node_ 2)
    list(INSERT node_ 2 ${color})
    set_cache(${node} ${node_})
endfunction()
function(rb_node_set_parent node parent)
    set(node_ ${${node}})
    list(REMOVE_AT node_ 3)
    list(INSERT node_ 3 ${parent})
    set_cache(${node} ${node_})
endfunction()
function(rb_node_set_left node left)
    set(node_ ${${node}})
    list(REMOVE_AT node_ 4)
    list(INSERT node_ 4 ${left})
    set_cache(${node} ${node_})
    if(left)
        rb_node_set_parent(${left} ${node})
    endif()
endfunction()
function(rb_node_set_right node right)
    set(node_ ${${node}})
    list(REMOVE_AT node_ 5)
    list(APPEND node_ ${right})
    set_cache(${node} ${node_})
    if(right)
        rb_node_set_parent(${right} ${node})
    endif()
endfunction()

function(rb_node_allocate prefix node key data color)
    allocate(${prefix} node_)
    set_cache(${node_} ${key} ${data} ${color} FALSE FALSE FALSE)
    set(${node} ${node_} PARENT_SCOPE)
endfunction()

function(rb_node_print node)
    if(ARGV1)
        math(EXPR depth "${ARGV1} + 1")
    else()
        set(depth 1)
    endif()
    rb_node_get_key(${node} key)
    rb_node_get_data(${node} data)
    rb_node_get_color(${node} color)
    rb_node_get_parent(${node} parent)
    rb_node_get_left(${node} left)
    rb_node_get_right(${node} right)
    if(left)
        rb_node_print(${left} ${depth})
    endif()
    set(s "")
    set(i 1)
    while(i LESS ${depth})
        set(s "${s}    ")
        math(EXPR i "${i} + 1")
    endwhile()
    if(color)
        set(s "${s}[R]")
    else()
        set(s "${s}[B]")
    endif()
    set(s "${s} ${key}: ${data}")
    message(${s})
    if(right)
        rb_node_print(${right} ${depth})
    endif()
endfunction()


function(rb_find prefix key data)
    set(node0 ${${prefix}_root})
    while(node0)
        rb_node_get_key(${node0} key0)
        if(key EQUAL key0)
            rb_node_get_data(${node0} data_)
            set(${data} ${data_} PARENT_SCOPE)
            return()
        endif()
        if(key LESS key0)
            rb_node_get_left(${node0} node0)
        else()
            rb_node_get_right(${node0} node0)
        endif()
    endwhile()
    set(${data} NOTFOUND PARENT_SCOPE)
endfunction()

function(rb_rotate_left prefix node0)
    rb_node_get_right(${node0} node1)
    rb_node_get_left(${node1} node2)
    rb_node_get_parent(${node0} parent0)
    rb_node_set_right(${node0} ${node2})
    rb_node_set_left(${node1} ${node0})
    if(parent0)
        rb_node_get_left(${parent0} left3)
        if(node0 STREQUAL left3)
            rb_node_set_left(${parent0} ${node1})
        else()
            rb_node_set_right(${parent0} ${node1})
        endif()
    else()
        rb_node_set_parent(${node1} FALSE)
        rb_set_root(${prefix} ${node1})
    endif()
endfunction()

function(rb_rotate_right prefix node0)
    rb_node_get_left(${node0} node1)
    rb_node_get_right(${node1} node2)
    rb_node_get_parent(${node0} parent0)
    rb_node_set_left(${node0} ${node2})
    rb_node_set_right(${node1} ${node0})
    if(parent0)
        rb_node_get_left(${parent0} left3)
        if(node0 STREQUAL left3)
            rb_node_set_left(${parent0} ${node1})
        else()
            rb_node_set_right(${parent0} ${node1})
        endif()
    else()
        rb_node_set_parent(${node1} FALSE)
        rb_set_root(${prefix} ${node1})
    endif()
endfunction()

function(rb_adjust prefix node0)
    rb_node_get_parent(${node0} node1)
    if(NOT node1)
        rb_node_set_color(${node0} FALSE)
        return()
    endif()
    rb_node_get_color(${node1} color1)
    if(NOT color1)
        return()
    endif()
    rb_node_get_parent(${node1} node2)
    rb_node_get_left(${node1} left1)
    rb_node_get_right(${node1} right1)
    rb_node_get_left(${node2} left2)
    rb_node_get_right(${node2} right2)
    if(node1 STREQUAL left2)
        if(right2)
            rb_node_get_color(${right2} color3)
            if(color3)
                rb_node_set_color(${node2} TRUE)
                rb_node_set_color(${left2} FALSE)
                rb_node_set_color(${right2} FALSE)
                rb_adjust(${prefix} ${node2})
                return()
            endif()
        endif()
        if(node0 STREQUAL right1)
            rb_rotate_left(${prefix} ${node1})
            set(node1 ${node0})
        endif()
        rb_node_set_color(${node2} TRUE)
        rb_node_set_color(${node1} FALSE)
        rb_rotate_right(${prefix} ${node2})
    else()
        if(left2)
            rb_node_get_color(${left2} color3)
            if(color3)
                rb_node_set_color(${node2} TRUE)
                rb_node_set_color(${left2} FALSE)
                rb_node_set_color(${right2} FALSE)
                rb_adjust(${prefix} ${node2})
                return()
            endif()
        endif()
        if(node0 STREQUAL left1)
            rb_rotate_right(${prefix} ${node1})
            set(node1 ${node0})
        endif()
        rb_node_set_color(${node2} TRUE)
        rb_node_set_color(${node1} FALSE)
        rb_rotate_left(${prefix} ${node2})
    endif()
endfunction()

function(rb_insert prefix key data)
    set(node0 ${${prefix}_root})
    if(NOT node0)
        rb_node_allocate(${prefix} node0 ${key} ${data} FALSE)
        rb_set_root(${prefix} ${node0})
        return()
    endif()
    while(TRUE)
        rb_node_get_key(${node0} key0)
        if(key EQUAL key0)
            rb_node_set_data(${node0} ${data})
            return()
        endif()
        if(key LESS key0)
            rb_node_get_left(${node0} left0)
            if(left0)
                set(node0 ${left0})
            else()
                rb_node_allocate(${prefix} node1 ${key} ${data} TRUE)
                rb_node_set_left(${node0} ${node1})
                rb_adjust(${prefix} ${node1})
                return()
            endif()
        else()
            rb_node_get_right(${node0} right0)
            if(right0)
                set(node0 ${right0})
            else()
                rb_node_allocate(${prefix} node1 ${key} ${data} TRUE)
                rb_node_set_right(${node0} ${node1})
                rb_adjust(${prefix} ${node1})
                return()
            endif()
        endif()
    endwhile()
endfunction()

function(rb_print prefix)
    set(root ${${prefix}_root})
    if(root)
        rb_node_print(${root})
    else()
        message("(Empty)")
    endif()
endfunction()

rb_init(rb)

set(keys 3 22 14 23 7 4 24 2 11 9 21 18 5 16 15 10 1 6 13 20 12 17 26 8 25 19)
message("Keys: ${keys}")

message("")

foreach(key ${keys})
    math(EXPR c "${key} + 64")
    string(ASCII ${c} c)
    rb_insert(rb ${key} ${c})
endforeach()

message("RBTree:")
rb_print(rb)

message("")

rb_find(rb 20 c)
message("Find 20: ${c}")

rb_find(rb 42 c)
message("Find 42: ${c}")
