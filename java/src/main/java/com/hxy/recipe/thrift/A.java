/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hxy.recipe.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2023-01-16")
public class A implements org.apache.thrift.TBase<A, A._Fields>, java.io.Serializable, Cloneable, Comparable<A> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("A");

  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField A_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("aStr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField A_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("aBool", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ATupleSchemeFactory());
  }

  public B b; // optional
  public String aStr; // optional
  public boolean aBool; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    B((short)1, "b"),
    A_STR((short)2, "aStr"),
    A_BOOL((short)3, "aBool");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // B
          return B;
        case 2: // A_STR
          return A_STR;
        case 3: // A_BOOL
          return A_BOOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ABOOL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.B,_Fields.A_STR,_Fields.A_BOOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, B.class)));
    tmpMap.put(_Fields.A_STR, new org.apache.thrift.meta_data.FieldMetaData("aStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.A_BOOL, new org.apache.thrift.meta_data.FieldMetaData("aBool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(A.class, metaDataMap);
  }

  public A() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public A(A other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetB()) {
      this.b = new B(other.b);
    }
    if (other.isSetAStr()) {
      this.aStr = other.aStr;
    }
    this.aBool = other.aBool;
  }

  public A deepCopy() {
    return new A(this);
  }

  @Override
  public void clear() {
    this.b = null;
    this.aStr = null;
    setABoolIsSet(false);
    this.aBool = false;
  }

  public B getB() {
    return this.b;
  }

  public A setB(B b) {
    this.b = b;
    return this;
  }

  public void unsetB() {
    this.b = null;
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return this.b != null;
  }

  public void setBIsSet(boolean value) {
    if (!value) {
      this.b = null;
    }
  }

  public String getAStr() {
    return this.aStr;
  }

  public A setAStr(String aStr) {
    this.aStr = aStr;
    return this;
  }

  public void unsetAStr() {
    this.aStr = null;
  }

  /** Returns true if field aStr is set (has been assigned a value) and false otherwise */
  public boolean isSetAStr() {
    return this.aStr != null;
  }

  public void setAStrIsSet(boolean value) {
    if (!value) {
      this.aStr = null;
    }
  }

  public boolean isABool() {
    return this.aBool;
  }

  public A setABool(boolean aBool) {
    this.aBool = aBool;
    setABoolIsSet(true);
    return this;
  }

  public void unsetABool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABOOL_ISSET_ID);
  }

  /** Returns true if field aBool is set (has been assigned a value) and false otherwise */
  public boolean isSetABool() {
    return EncodingUtils.testBit(__isset_bitfield, __ABOOL_ISSET_ID);
  }

  public void setABoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABOOL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((B)value);
      }
      break;

    case A_STR:
      if (value == null) {
        unsetAStr();
      } else {
        setAStr((String)value);
      }
      break;

    case A_BOOL:
      if (value == null) {
        unsetABool();
      } else {
        setABool((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case B:
      return getB();

    case A_STR:
      return getAStr();

    case A_BOOL:
      return isABool();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case B:
      return isSetB();
    case A_STR:
      return isSetAStr();
    case A_BOOL:
      return isSetABool();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof A)
      return this.equals((A)that);
    return false;
  }

  public boolean equals(A that) {
    if (that == null)
      return false;

    boolean this_present_b = true && this.isSetB();
    boolean that_present_b = true && that.isSetB();
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (!this.b.equals(that.b))
        return false;
    }

    boolean this_present_aStr = true && this.isSetAStr();
    boolean that_present_aStr = true && that.isSetAStr();
    if (this_present_aStr || that_present_aStr) {
      if (!(this_present_aStr && that_present_aStr))
        return false;
      if (!this.aStr.equals(that.aStr))
        return false;
    }

    boolean this_present_aBool = true && this.isSetABool();
    boolean that_present_aBool = true && that.isSetABool();
    if (this_present_aBool || that_present_aBool) {
      if (!(this_present_aBool && that_present_aBool))
        return false;
      if (this.aBool != that.aBool)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_b = true && (isSetB());
    list.add(present_b);
    if (present_b)
      list.add(b);

    boolean present_aStr = true && (isSetAStr());
    list.add(present_aStr);
    if (present_aStr)
      list.add(aStr);

    boolean present_aBool = true && (isSetABool());
    list.add(present_aBool);
    if (present_aBool)
      list.add(aBool);

    return list.hashCode();
  }

  @Override
  public int compareTo(A other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAStr()).compareTo(other.isSetAStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aStr, other.aStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetABool()).compareTo(other.isSetABool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetABool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aBool, other.aBool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("A(");
    boolean first = true;

    if (isSetB()) {
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
    }
    if (isSetAStr()) {
      if (!first) sb.append(", ");
      sb.append("aStr:");
      if (this.aStr == null) {
        sb.append("null");
      } else {
        sb.append(this.aStr);
      }
      first = false;
    }
    if (isSetABool()) {
      if (!first) sb.append(", ");
      sb.append("aBool:");
      sb.append(this.aBool);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (b != null) {
      b.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AStandardSchemeFactory implements SchemeFactory {
    public AStandardScheme getScheme() {
      return new AStandardScheme();
    }
  }

  private static class AStandardScheme extends StandardScheme<A> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, A struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.b = new B();
              struct.b.read(iprot);
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // A_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aStr = iprot.readString();
              struct.setAStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.aBool = iprot.readBool();
              struct.setABoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, A struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.b != null) {
        if (struct.isSetB()) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          struct.b.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aStr != null) {
        if (struct.isSetAStr()) {
          oprot.writeFieldBegin(A_STR_FIELD_DESC);
          oprot.writeString(struct.aStr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetABool()) {
        oprot.writeFieldBegin(A_BOOL_FIELD_DESC);
        oprot.writeBool(struct.aBool);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ATupleSchemeFactory implements SchemeFactory {
    public ATupleScheme getScheme() {
      return new ATupleScheme();
    }
  }

  private static class ATupleScheme extends TupleScheme<A> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, A struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetB()) {
        optionals.set(0);
      }
      if (struct.isSetAStr()) {
        optionals.set(1);
      }
      if (struct.isSetABool()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetB()) {
        struct.b.write(oprot);
      }
      if (struct.isSetAStr()) {
        oprot.writeString(struct.aStr);
      }
      if (struct.isSetABool()) {
        oprot.writeBool(struct.aBool);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, A struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.b = new B();
        struct.b.read(iprot);
        struct.setBIsSet(true);
      }
      if (incoming.get(1)) {
        struct.aStr = iprot.readString();
        struct.setAStrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aBool = iprot.readBool();
        struct.setABoolIsSet(true);
      }
    }
  }

}

